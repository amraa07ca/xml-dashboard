{"version":3,"sources":["utils/setAuthToken.js","actions/authActions.js","actions/types.js","reducers/authReducers.js","reducers/errorReducers.js","reducers/index.js","store.js","components/SideNavigation.js","components/TopNavigation.js","components/privateRoute/PrivateRoute.js","components/properties/DeleteModal.js","components/properties/EditAddModal.js","components/properties/PropertyList.js","components/properties/Properties.js","components/communities/CommunityList.js","components/communities/EditAddModal.js","components/communities/DeleteModal.js","components/communities/Communities.js","components/xmlStation/XmlStation.js","components/Routes.js","components/RoutesWithNavigation.js","components/auth/Login.js","components/auth/Register.js","App.js","serviceWorker.js","index.js"],"names":["setAuthToken","token","axios","defaults","headers","common","setCurrentUser","decoded","type","payload","logoutUser","dispatch","localStorage","removeItem","isEmpty","require","initialState","isAuthenticated","user","loading","combineReducers","auth","state","action","errors","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","SideNavigation","onLinkClick","this","props","className","logo","fixed","topLevel","to","onClick","icon","React","Component","TopNavigation","onLogoutClick","e","preventDefault","scrolling","style","zIndex","expand","right","flexDirection","nav","caret","minWidth","href","connect","component","rest","render","DeleteModal","isOpen","deleteModal","toggle","onSubmit","event","id","idDelete","delete","then","res","console","log","data","color","cancel","EditAddModal","editAddModal","undefined","property","_id","post","userID","put","label","containerClass","value","name","onChange","PropertyList","wide","waves","cascade","hover","src","alt","overlay","tag","deleteOnClick","editOnClick","Properties","socket","socketIOClient","useState","setEditAddModal","setDeleteModal","setIdDelete","propertyList","setPropertyList","setProperty","renderPropertyList","get","response","catch","error","on","useEffect","map","key","floating","target","CommunityList","community","communityName","disabledTab","setDisabledTab","setErrors","activeItem","setActiveItem","images","setImages","checked","text","gallery","size","tabs","activeClassName","active","role","disabled","autoComplete","classnames","invalid","streetAddress1","address","streetAddress2","city","options","selected","getTextContent","handleStateChange","zip","latitude","longitude","email","salesAgent","phoneNumber","onDrop","acceptedFiles","file","Object","assign","preview","URL","createObjectURL","formData","FormData","forEach","append","handleOnDrop","getRootProps","getInputProps","image","form","err","Communities","communitiesList","setCommunitiesList","String","setCommunity","renderCommunityList","XmlStation","fourtOFour","Routes","path","exact","App","handleResize","setState","windowWidth","window","innerWidth","toggleSideNav","breakWidth","sideNavToggled","currentPage","prevProps","nextProps","snapshot","location","pathname","addEventListener","removeEventListener","dynamicLeftPadding","paddingLeft","margin","Login","handleLoginSubmit","userData","password","loginUser","history","push","md","noValidate","sm","autoFocus","iconClass","passwordincorrect","emailnotfound","fab","setItem","jwt_decode","Register","registerHandler","newUser","password2","companyName","gkaToken","registerUser","required","withRouter","jwtToken","currentTime","Date","now","exp","RoutesWithNavigation","Boolean","hostname","match","customHistory","createBrowserHistory","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fd698720.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst setAuthToken = token => {\n    if (token) {\n        // Apply authorization token to every request if logged in\n        axios.defaults.headers.common[\"Authorization\"] = token;\n    } else {\n        // Delete auth header\n        delete axios.defaults.headers.common[\"Authorization\"];\n    }\n};\n\nexport default setAuthToken;","import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport {\n    GET_ERRORS,\n    SET_CURRENT_USER,\n    USER_LOADING\n} from \"./types\";\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n    axios.post(\"/users/register\", userData)\n        .then(res => history.push(\"/login\")) // re-direct to login on successful register\n        .catch(err =>\n            dispatch({\n                type: GET_ERRORS,\n                payload: err.response.data\n            })\n        );\n};\n\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n    axios.post(\"/users/login\", userData)\n        .then(res => {\n            // Save to localStorage\n            // Set token to localStorage\n            const { token, userID } = res.data;\n            localStorage.setItem(\"jwtToken\", token);\n            localStorage.setItem(\"userID\", userID);\n            // Set token to Auth header\n            setAuthToken(token);\n            // Decode token to get user data\n            const decoded = jwt_decode(token);\n            // Set current user\n            dispatch(setCurrentUser(decoded));\n        })\n        .catch(err =>\n            dispatch({\n                type: GET_ERRORS,\n                payload: err.response.data\n            })\n        );\n};\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n    return {\n        type: SET_CURRENT_USER,\n        payload: decoded\n    };\n};\n// User loading\nexport const setUserLoading = () => {\n    return {\n        type: USER_LOADING\n    };\n};\n// Log user out\nexport const logoutUser = () => dispatch => {\n    // Remove token from local storage\n    localStorage.removeItem(\"jwtToken\");\n    localStorage.removeItem(\"userID\");\n    // Remove auth header for future requests\n    setAuthToken(false);\n    // Set current user to empty object {} which will set isAuthenticated to false\n    dispatch(setCurrentUser({}));\n};","export const GET_ERRORS = \"GET_ERRORS\";\nexport const USER_LOADING = \"USER_LOADING\";\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";","import {\n    SET_CURRENT_USER,\n    USER_LOADING\n} from \"../actions/types\";\n\nconst isEmpty = require(\"is-empty\");\nconst initialState = {\n    isAuthenticated: false,\n    user: {},\n    loading: false\n};\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case SET_CURRENT_USER:\n            return {\n                ...state,\n                isAuthenticated: !isEmpty(action.payload),\n                user: action.payload\n            };\n        case USER_LOADING:\n            return {\n                ...state,\n                loading: true\n            };\n        default:\n            return state;\n    }\n}","import { GET_ERRORS } from \"../actions/types\";\n\nconst initialState = {};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_ERRORS:\n            return action.payload;\n        default:\n            return state;\n    }\n}","import { combineReducers } from \"redux\";\nimport authReducer from \"./authReducers\";\nimport errorReducer from \"./errorReducers\";\nexport default combineReducers({\n    auth: authReducer,\n    errors: errorReducer\n});","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    compose(\n        applyMiddleware(...middleware),\n        // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n);\nexport default store;","import React from 'react';\nimport {\n    MDBSideNavLink,\n    MDBSideNavNav,\n    MDBSideNav,\n    MDBIcon\n} from 'mdbreact';\n\nclass SideNavigation extends React.Component {\n    \n    render() {\n        const { onLinkClick } = this.props;\n        return (\n            <div className='white-skin'>\n                <MDBSideNav\n                    className='side-nav-logo'\n                    logo='/assets/logo/GKA-Dashboard-Logo.svg'\n                    fixed\n                >\n                    <MDBSideNavNav>\n                        <MDBSideNavLink topLevel to='/properties' onClick={onLinkClick}>\n                            <MDBIcon icon='th-large mr-2' />\n                            Properties\n                        </MDBSideNavLink>\n                        <MDBSideNavLink topLevel to='/communities' onClick={onLinkClick}>\n                            <MDBIcon icon='th-large mr-2' />\n                            Communities\n                        </MDBSideNavLink>\n                        <MDBSideNavLink topLevel to='/xml-station' onClick={onLinkClick}>\n                            <MDBIcon icon='th-large mr-2' />\n                            XML Station\n                        </MDBSideNavLink>\n                    </MDBSideNavNav>\n                </MDBSideNav>\n            </div>\n        );\n    }\n}\n\nexport default SideNavigation;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { logoutUser } from \"../actions/authActions\";\n\nimport {\n    MDBNavbar,\n    MDBNavbarNav,\n    MDBIcon,\n    MDBDropdown,\n    MDBDropdownToggle,\n    MDBDropdownMenu,\n    MDBDropdownItem,\n} from 'mdbreact';\n\nclass TopNavigation extends Component {\n    onLogoutClick = (e) => {\n        e.preventDefault();\n        this.props.logoutUser();\n    }\n\n    render() {\n        return (\n            <Router>\n                <MDBNavbar\n                    className='flexible-MDBNavbar'\n                    scrolling\n                    fixed='top'\n                    style={{ zIndex: 3 }}\n                >\n                    <MDBNavbarNav expand='sm' right style={{ flexDirection: 'row' }}>\n                        <MDBDropdown>\n                            <MDBDropdownToggle nav caret>\n                                <MDBIcon icon='user' />{' '}\n                                <span className='d-none d-md-inline'>Profile</span>\n                            </MDBDropdownToggle>\n                            <MDBDropdownMenu right style={{ minWidth: '200px' }}>\n                                <MDBDropdownItem href='#!' onClick={this.onLogoutClick}>Log Out</MDBDropdownItem>\n                                <MDBDropdownItem href='#!'>My Account</MDBDropdownItem>\n                            </MDBDropdownMenu>\n                        </MDBDropdown>\n                    </MDBNavbarNav>\n                </MDBNavbar>\n            </Router>\n        )\n    }\n}\n\nTopNavigation.propTypes = {\n    logoutUser: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    auth: state.auth\n});\n\nexport default connect(\n    mapStateToProps,\n    { logoutUser }\n)(TopNavigation);\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\n    <Route\n        {...rest}\n        render={props =>\n            auth.isAuthenticated === true ? (\n                <Component {...props} />\n            ) : (\n                    <Redirect to=\"/login\" />\n                )\n        }\n    />\n);\nPrivateRoute.propTypes = {\n    auth: PropTypes.object.isRequired\n};\nconst mapStateToProps = state => ({\n    auth: state.auth\n});\nexport default connect(mapStateToProps)(PrivateRoute);","import React from 'react';\nimport axios from 'axios';\n\nimport {\n    MDBModal,\n    MDBModalBody,\n    MDBBtn,\n} from 'mdbreact';\n\nconst DeleteModal = (props) => {\n\n    const deleteOnSubmit = (event, id) => {\n        event.preventDefault();\n        axios.delete('http://localhost:5000/properties/' + id)\n            .then(res => {\n                console.log(res.data);\n                props.toggle();\n            });\n    }\n    \n    return (\n        <MDBModal isOpen={props.deleteModal} toggle={props.toggle} className='property-modal'>\n            <MDBModalBody>\n                <form onSubmit={e => deleteOnSubmit(e, props.idDelete)} >\n                    <div className=\"text-center py-4 mt-3\">\n                        <h6 className='mb-3'>Are you sure?</h6>\n                        <MDBBtn color=\"cyan\" onClick={props.cancel}>\n                            Cancel\n                        </MDBBtn>\n                        <MDBBtn color=\"cyan\" type=\"submit\">\n                            Delete\n                        </MDBBtn>\n                    </div>\n                </form>\n            </MDBModalBody>\n        </MDBModal>\n    )\n}\n\nexport default DeleteModal;","import React from 'react';\nimport axios from 'axios';\n\nimport {\n    MDBModal,\n    MDBModalBody,\n    MDBInput,\n    MDBBtn\n} from 'mdbreact';\n\nconst EditAddModal = (props) => {\n\n    const editAddOnSubmit = (event) => {\n        event.preventDefault();\n        if(props.property._id === undefined) {\n            axios.post('/properties/'+localStorage.userID+'/add', props.property)\n                .then(res => {\n                    console.log(res.data);\n                    props.toggle();\n                });\n        } else {\n            axios.put('/properties/update/' + props.property._id, props.property)\n                .then(res => {\n                    console.log(res.data);\n                    props.toggle();\n                });\n        }\n    }\n\n    return (\n        <MDBModal isOpen={props.editAddModal} toggle={props.toggle} className='property-modal'>\n            <MDBModalBody>\n                <form onSubmit={e => editAddOnSubmit(e)}>\n                    <MDBInput\n                        label='Property Name'\n                        containerClass='form-sm'\n                        value={props.property.name}\n                        onChange={props.onChange}\n                    />\n                    <div className=\"text-center py-4 mt-3\">\n                        <MDBBtn color=\"cyan\" type=\"submit\">\n                            Save\n                        </MDBBtn>\n                    </div>\n                </form>\n            </MDBModalBody>\n        </MDBModal>\n    );\n}\n\nexport default EditAddModal;","import React from 'react';\n\nimport {\n    MDBCol,\n    MDBCard,\n    MDBView,\n    MDBMask,\n    MDBCardBody,\n    MDBCardTitle,\n    MDBIcon,\n} from 'mdbreact';\n\nconst PropertyList = (props) => {\n\n    return (\n        <>\n            <MDBCol className='col-custom property-list'>\n                <MDBCard wide>\n                    <MDBView waves cascade hover>\n                        <img\n                            src='/assets/listingImg.jpg'\n                            className='img-fluid'\n                            alt={props.property.name}\n                        />\n                        <MDBMask overlay='white-slight' tag='a' />\n                    </MDBView>\n                    <MDBCardBody className='' cascade>\n                        <MDBCardTitle tag='h5' className='property-name'>\n                            {props.property.name}\n                        </MDBCardTitle>\n                        <hr />\n                        <div className='d-flex justify-content-between'>\n                            <div>\n                                <button className='icon-btn text-grey' onClick={props.deleteOnClick}>\n                                    <MDBIcon icon='trash-alt' />\n                                </button>\n                            </div>\n                            <div>\n                                <button className='icon-btn text-grey' onClick={props.editOnClick}>\n                                    <MDBIcon icon='edit' />\n                                </button>\n                            </div>\n                        </div>\n                    </MDBCardBody>\n                </MDBCard>\n            </MDBCol>\n        </>\n    )\n}\n\nexport default PropertyList;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport socketIOClient from \"socket.io-client\";\n\nimport './Properties.scss';\n\nimport DeleteModal from './DeleteModal';\nimport EditAddModal from './EditAddModal';\nimport PropertyList from './PropertyList';\n\nimport {\n   MDBRow,\n   MDBIcon,\n   MDBBtn,\n} from 'mdbreact';\n\nconst Properties = () => {\n   const socket = socketIOClient('http://localhost:5000');\n\n   const [editAddModal, setEditAddModal] = useState(false);\n   const [deleteModal, setDeleteModal] = useState(false);\n   const [idDelete, setIdDelete] = useState('');\n\n   const [propertyList, setPropertyList] = useState([]);\n   const [property, setProperty] = useState({});\n\n   const renderPropertyList = () => {\n      axios.get('/properties/' + localStorage.userID)\n         .then(response => {\n            setPropertyList(response.data);\n         })\n         .catch((error) => {\n            console.log(error);\n         })\n   }\n\n   socket.on('dbModified', () => {\n      renderPropertyList();\n   });\n\n   useEffect(() => {\n      renderPropertyList();\n   }, [])\n\n   const editOnClick = (val) => {\n      setProperty(val);\n      setEditAddModal(!editAddModal);\n   }\n\n   return (\n      <>\n         <section>\n            <MDBRow>\n               {propertyList.map(property => {\n                  return (\n                     <PropertyList\n                        property={property}\n                        key={property._id}\n                        deleteOnClick={() => { setDeleteModal(!deleteModal); setIdDelete(property._id) }}\n                        editOnClick={() => editOnClick(property)}\n                     />\n                  )\n               })}\n            </MDBRow>\n         </section>\n         <section>\n            <MDBBtn floating tag='a' className='add-property-btn bg-blue' onClick={() => { setEditAddModal(!editAddModal); setProperty(''); }}>\n               <MDBIcon icon='plus' />\n            </MDBBtn>\n            <EditAddModal\n               editAddModal={editAddModal}\n               toggle={() => setEditAddModal(!editAddModal)}\n               property={property}\n               onChange={e => setProperty({ ...property, name: e.target.value })}\n            />\n            <DeleteModal\n               deleteModal={deleteModal}\n               toggle={() => setDeleteModal(!deleteModal)}\n               idDelete={idDelete}\n               cancel={() => { setDeleteModal(false); setIdDelete('empty'); }}\n            />\n         </section>\n      </>\n   )\n}\n\nexport default Properties;\n","import React from 'react';\n\nimport {\n    MDBCol,\n    MDBCard,\n    MDBView,\n    MDBMask,\n    MDBCardBody,\n    MDBCardTitle,\n    MDBIcon,\n} from 'mdbreact';\n\nconst CommunityList = (props) => {\n    return (\n        <>\n            <MDBCol className='col-custom property-list'>\n                <MDBCard wide>\n                    <MDBView waves cascade hover>\n                        <img\n                            src='/assets/listingImg.jpg'\n                            className='img-fluid'\n                            alt=\"Test\"\n                        />\n                        <MDBMask overlay='white-slight' tag='a' />\n                    </MDBView>\n                    <MDBCardBody className='' cascade>\n                        <MDBCardTitle tag='h5' className='property-name'>\n                            {props.community.communityName}\n                        </MDBCardTitle>\n                        <hr />\n                        <div className='d-flex justify-content-between'>\n                            <div>\n                                <button className='icon-btn text-grey' onClick={props.deleteOnClick}>\n                                    <MDBIcon icon='trash-alt' />\n                                </button>\n                            </div>\n                            <div>\n                                <button className='icon-btn text-grey' onClick={props.editOnClick}>\n                                    <MDBIcon icon='edit' />\n                                </button>\n                            </div>\n                        </div>\n                    </MDBCardBody>\n                </MDBCard>\n            </MDBCol>\n        </>\n    );\n};\n\nexport default CommunityList;","import React, { useState, useEffect } from 'react';\nimport Dropzone from 'react-dropzone';\nimport 'react-dropzone-uploader/dist/styles.css'\nimport DropzoneUploader from 'react-dropzone-uploader';\nimport axios from 'axios';\nimport classnames from \"classnames\";\n\nimport {\n    MDBModal,\n    MDBModalBody,\n    MDBInput,\n    MDBBtn,\n    MDBNav,\n    MDBNavItem,\n    MDBNavLink,\n    MDBIcon,\n    MDBSelect\n} from 'mdbreact';\n\nconst EditAddModal = (props) => {\n    const [disabledTab, setDisabledTab] = useState(true);\n    const [errors, setErrors] = useState({});\n    const [activeItem, setActiveItem] = useState(2);\n    const [images, setImages] = useState([]);\n    const [state, setState] = useState([\n        {\n            checked: true,\n            text: \"MD\",\n            value: \"MD\"\n        },\n        {\n            text: \"VA\",\n            value: \"VA\"\n        }\n    ]);\n\n    // specify upload params and url for your files\n    const getUploadParams = ({ meta }) => { return { url: 'https://httpbin.org/post' } }\n    \n    // called every time a file's `status` changes\n    const handleChangeStatus = ({ meta, file }, status) => { console.log(status, meta, file) }\n    \n    // receives array of files that are done uploading when submit button is clicked\n    const handleSubmit = (files) => { console.log(files.map(f => f.meta)) }\n    \n    const initialize = (event) => {\n        event.preventDefault(event);\n\n        axios.post('/communities/' + localStorage.userID + '/add', props.community)\n            .then(res => {\n                console.log(res.data);\n                setDisabledTab(false);\n                setActiveItem(2);\n            }).catch(err => {\n                setErrors(err.response.data);\n            });\n    }\n\n    const editAddOnSubmit = (event) => {\n        event.preventDefault(event);\n        axios.put('/communities/update/' + props.community._id, props.community)\n            .then(res => {\n                console.log(res.data);\n                props.toggle();\n            })\n    }\n\n    const handleOnDrop = (acceptedFiles) => {\n\n        acceptedFiles = acceptedFiles.map(file => Object.assign(file, {\n            preview: URL.createObjectURL(file)\n        }));\n\n        setImages([...images, ...acceptedFiles]);\n\n        var formData = new FormData();\n\n        acceptedFiles.forEach(file => {\n            formData.append('images', file);\n        });\n\n        axios.post('/upload/' + localStorage.userID + '/' + props.community._id, formData)\n            .then(res => {\n                // setImages([...images, ...res.data.files]);\n                console.log(res);\n            });\n    }\n\n    useEffect(() => {\n        setImages(props.community.gallery);\n        if(props.community._id) {\n            setDisabledTab(false);\n        } else {\n            setDisabledTab(true);\n        }\n    }, [props]);\n    \n    return (\n        <MDBModal isOpen={props.editAddModal} toggle={props.toggle} size=\"fluid\" className=\"editAddModal\">\n            <MDBModalBody>\n                <MDBNav tabs className=\"nav-justified modalNav\">\n                    <MDBNavItem>\n                        <MDBNavLink to=\"#\" activeClassName=\"false\" active={activeItem === 1} onClick={() => setActiveItem(1)} role=\"tab\" >\n                            <MDBIcon icon=\"home\" /> Basic\n                        </MDBNavLink>\n                    </MDBNavItem>\n                    <MDBNavItem>\n                        <MDBNavLink to=\"#\" activeClassName=\"false\" active={activeItem === 2} disabled={disabledTab} onClick={() => setActiveItem(2)} role=\"tab\" >\n                            <MDBIcon icon=\"images\" /> Images\n                        </MDBNavLink>\n                    </MDBNavItem>\n                    <MDBNavItem>\n                        <MDBNavLink to=\"#\" activeClassName=\"false\" active={activeItem === 3} disabled={disabledTab} onClick={() => setActiveItem(3)} role=\"tab\" >\n                            <MDBIcon icon=\"envelope\" /> Attachment\n                        </MDBNavLink>\n                    </MDBNavItem>\n                </MDBNav>\n                <div className=\"content card d-flex flex-column\">\n                    <form\n                        id=\"modalForm\"\n                        className=\"flex-grow-1\"\n                        onSubmit={e => editAddOnSubmit(e)}\n                        autoComplete=\"off\"\n                    >\n                        {activeItem === 1 && (\n                            <div className=\"container-fluid\">\n                                <div className=\"row\">\n                                    <div className=\"col-md-4 input-wrap\">\n                                        <MDBInput\n                                            label='Community Name*'\n                                            id='communityName'\n                                            containerClass={classnames(\"form-sm\", { invalid: errors.communityName })}\n                                            value={props.community.communityName}\n                                            onChange={props.onChange}\n                                            autoComplete=\"new-password\"\n                                        />\n                                        <div className=\"error-message\">\n                                            {errors.communityName}\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"row\">\n                                    <div className=\"col-12 divider\">\n                                        <hr></hr>\n                                        <h6>Community Location</h6>\n                                    </div>\n                                </div>\n                                <div className=\"row\">\n                                    <div className=\"col-md-6 input-wrap\">\n                                        <MDBInput\n                                            label='Street Address 1*'\n                                            id='streetAddress1'\n                                            containerClass={classnames(\"form-sm\", { invalid: errors.streetAddress1 })}\n                                            value={props.community.address.streetAddress1}\n                                            onChange={props.onChange}\n                                            autoComplete=\"new-password\"\n                                        />\n                                        <div className=\"error-message\">\n                                            {errors.streetAddress1}\n                                        </div>\n                                    </div>\n                                    <div className=\"col-md-6 input-wrap\">\n                                        <MDBInput\n                                            label='Street Address 2'\n                                            id='streetAddress2'\n                                            containerClass=\"form-sm\"\n                                            value={props.community.address.streetAddress2}\n                                            onChange={props.onChange}\n                                            autoComplete=\"new-password\"\n                                        />\n                                    </div>\n                                    <div className=\"col-md-4 input-wrap\">\n                                        <MDBInput\n                                            label='City*'\n                                            id='city'\n                                            containerClass={classnames(\"form-sm\", { invalid: errors.city })}\n                                            value={props.community.address.city}\n                                            onChange={props.onChange}\n                                            autoComplete=\"new-password\"\n                                        />\n                                        <div className=\"error-message\">\n                                            {errors.city}\n                                        </div>\n                                    </div>\n                                    <div className=\"col-md-4 input-wrap\">\n                                        <MDBSelect\n                                            options={state}\n                                            id='state'\n                                            className={classnames(\"form-sm\", { invalid: errors.state })}\n                                            selected=\"Choose your state*\"\n                                            label=\"State\"\n                                            getTextContent={props.handleStateChange}\n                                            value={props.community.address.state}\n                                        />\n                                        <div className=\"error-message\">\n                                            {errors.state}\n                                        </div>\n                                    </div>\n                                    <div className=\"col-md-4 input-wrap\">\n                                        <MDBInput\n                                            label='Zip*'\n                                            id='zip'\n                                            containerClass={classnames(\"form-sm\", { invalid: errors.zip })}\n                                            value={props.community.address.zip}\n                                            onChange={props.onChange}\n                                            autoComplete=\"new-password\"\n                                        />\n                                        <div className=\"error-message\">\n                                            {errors.zip}\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"row\">\n                                    <div className=\"col-md-4 input-wrap\">\n                                        <MDBInput\n                                            label='Latitude*'\n                                            id='latitude'\n                                            containerClass={classnames(\"form-sm\", { invalid: errors.latitude })}\n                                            value={props.community.address.latitude}\n                                            onChange={props.onChange}\n                                            autoComplete=\"new-password\"\n                                        />\n                                        <div className=\"error-message\">\n                                            {errors.latitude}\n                                        </div>\n                                    </div>\n                                    <div className=\"col-md-4 input-wrap\">\n                                        <MDBInput\n                                            label='Longitude*'\n                                            id='longitude'\n                                            containerClass={classnames(\"form-sm\", { invalid: errors.longitude })}\n                                            value={props.community.address.longitude}\n                                            onChange={props.onChange}\n                                            autoComplete=\"new-password\"\n                                        />\n                                        <div className=\"error-message\">\n                                            {errors.longitude}\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"row\">\n                                    <div className=\"col-12 divider\">\n                                        <hr></hr>\n                                        <h6>Community Sales Contact Info</h6>\n                                    </div>\n                                </div>\n                                <div className=\"row\">\n                                    <div className=\"col-md-3 input-wrap\">\n                                        <MDBInput\n                                            label='Email*'\n                                            id='email'\n                                            containerClass={classnames(\"form-sm\", { invalid: errors.email })}\n                                            value={props.community.salesAgent.email}\n                                            onChange={props.onChange}\n                                            autoComplete=\"new-password\"\n                                        />\n                                        <div className=\"error-message\">\n                                            {errors.email}\n                                        </div>\n                                    </div>\n                                    <div className=\"col-md-3 input-wrap\">\n                                        <MDBInput\n                                            label='Phone Number'\n                                            id='phoneNumber'\n                                            containerClass={classnames(\"form-sm\", { invalid: errors.phoneNumber })}\n                                            value={props.community.salesAgent.phoneNumber}\n                                            onChange={props.onChange}\n                                            autoComplete=\"new-password\"\n                                        />\n                                        <div className=\"error-message\">\n                                            {errors.phoneNumber}\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        )}\n                    </form>\n                    {activeItem === 2 && (\n                        <Dropzone onDrop={(acceptedFiles) => handleOnDrop(acceptedFiles)}>\n                            {({ getRootProps, getInputProps }) => (\n                                <div {...getRootProps()} className=\"h-100 dropZone\">\n                                    <div className=\"row align-items-center\">\n                                        {images.map((image, key) => {\n                                            return (\n                                                <div className=\"col-md-1\" key={key}>\n                                                    <div>\n                                                        <img src={image['preview'] ? image['preview'] : image['location']} className=\"img-fluid w-100\" />\n                                                    </div>\n                                                </div>\n                                            )\n                                        })}\n                                    </div>\n                                </div>\n                            )}\n                        </Dropzone>\n                        // <DropzoneUploader\n                        //     // PreviewComponent={props => (<div>{console.log(props)}</div>)}\n                        //     getUploadParams={getUploadParams}\n                        //     onChangeStatus={handleChangeStatus}\n                        //     onSubmit={handleSubmit}\n                        //     accept=\"image/*,audio/*,video/*\"\n                        // >\n                        // </DropzoneUploader>\n                    )}\n                    {activeItem !== 1 && (\n                        <div className=\"text-center py-4 mt-3\">\n                            <MDBBtn type=\"submit\" form=\"modalForm\" className=\"bg-blue\">\n                                Save\n                            </MDBBtn>\n                        </div>\n                    )}\n                    {activeItem === 1 && (\n                        <div className=\"text-center py-4 mt-3\">\n                            <MDBBtn id=\"initialize\" className=\"bg-blue\" onClick={(e) => initialize(e)}>\n                                Next\n                            </MDBBtn>\n                        </div>\n                    )}\n                </div>\n            </MDBModalBody>\n        </MDBModal>\n    )\n};\n\nexport default EditAddModal;","import React from 'react';\nimport axios from 'axios';\n\nimport {\n    MDBModal,\n    MDBModalBody,\n    MDBBtn,\n} from 'mdbreact';\n\nconst DeleteModal = (props) => {\n\n    const deleteOnSubmit = (event, id) => {\n        event.preventDefault();\n        axios.delete('/communities/' + id)\n            .then(res => {\n                console.log(res.data);\n                props.toggle();\n            })\n    }\n\n    return (\n        <MDBModal isOpen={props.isOpen} toggle={props.toggle} className='property-modal'>\n            <MDBModalBody>\n                <form onSubmit={e => deleteOnSubmit(e, props.idDelete)} >\n                    <div className=\"text-center py-4 mt-3\">\n                        <h6 className='mb-3'>Are you sure?</h6>\n                        <MDBBtn color=\"cyan\" onClick={props.cancel}>\n                            Cancel\n                        </MDBBtn>\n                        <MDBBtn color=\"cyan\" type=\"submit\">\n                            Delete\n                        </MDBBtn>\n                    </div>\n                </form>\n            </MDBModalBody>\n        </MDBModal>\n    )\n}\n\nexport default DeleteModal;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport socketIOClient from \"socket.io-client\";\n\nimport {\n    MDBRow,\n    MDBBtn,\n    MDBIcon\n} from 'mdbreact';\n\nimport CommunityList from './CommunityList';\nimport EditAddModal from './EditAddModal';\nimport DeleteModal from './DeleteModal';\n\nconst Communities = () => {\n    const socket = socketIOClient('http://localhost:5000');\n\n    const [editAddModal, setEditAddModal] = useState(false);\n    const [deleteModal, setDeleteModal] = useState(false);\n    const [idDelete, setIdDelete] = useState('');\n    const [communitiesList, setCommunitiesList] = useState([]);\n    \n    const [community, setCommunity] = useState({\n        // communityName: String,\n        // streetAddress1: String,\n        // streetAddress2: String,\n        // city: String,\n        // state: String,\n        // zip: Number,\n        // latitude: Number,\n        // longitude: Number,\n        // email: String,\n        // phoneNumber: String\n        communityName: \"Community Name\",\n        address: {\n            streetAddress1: \"Street Address 1\",\n            streetAddress2: String,\n            city: \"Rockville\",\n            state: String,\n            zip: \"22182\",\n            latitude: \"39.0477476\",\n            longitude: \"-77.1272527\"\n        },\n        salesAgent: {\n            email: \"test@test.com\",\n            phoneNumber: \"3016578855\"\n        }\n    });\n\n    const handleStateChange = (value) => {\n        console.log(value);\n    }\n\n    const renderCommunityList = () => {\n        axios.get('/communities/' + localStorage.userID)\n            .then(res => {\n                setCommunitiesList(res.data);\n            })\n            .catch((err) => {\n                console.log(err);\n            })\n    }\n\n    socket.on('dbModified', () => {\n        renderCommunityList();\n    });\n\n    useEffect(() => {\n        renderCommunityList();\n    }, []);\n\n    return (\n        <>\n            <section>\n                <MDBRow>\n                    {communitiesList.map(community => {\n                        return (\n                            <CommunityList\n                                community={community}\n                                key={community._id}\n                                deleteOnClick={() => { setDeleteModal(!deleteModal); setIdDelete(community._id); }}\n                                editOnClick={() => { setCommunity(community); setEditAddModal(!editAddModal); }}\n                            />\n                        )\n                    })}\n\n                </MDBRow>\n            </section>\n            <section>\n                <MDBBtn floating tag='a' className='add-property-btn bg-blue' onClick={() => { setEditAddModal(!editAddModal); setCommunity(''); }}>\n                    <MDBIcon icon='plus' />\n                </MDBBtn>\n                <EditAddModal\n                    editAddModal={editAddModal}\n                    toggle={() => setEditAddModal(!editAddModal)}\n                    community={community}\n                    onChange={e => setCommunity({ ...community, [e.target.id]: e.target.value })}\n                    // handleStateChange={(state) => setCommunity({ ...community, state: state })}\n                    handleStateChange={(value) => handleStateChange(value)}\n                />\n                <DeleteModal\n                    isOpen={deleteModal}\n                    toggle={() => setDeleteModal(!deleteModal)}\n                    idDelete={idDelete}\n                    cancel={() => { setDeleteModal(!deleteModal); setIdDelete('empty'); }}\n                />\n            </section>\n        </>\n    )\n}\n\n\nexport default Communities;","import React from 'react';\n\nconst XmlStation = () => {\n    return (\n        <>\n            XML Station\n        </>\n    )\n}\n\nexport default XmlStation;","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport PrivateRoute from './privateRoute/PrivateRoute';\n\nimport Properties from './properties/Properties';\nimport Communities from './communities/Communities';\nimport XmlStation from './xmlStation/XmlStation';\n\nconst fourtOFour = () => <h1 className=\"text-center\">404</h1>\n\nclass Routes extends React.Component {\n    render() {\n        return (\n            <Switch>\n                <PrivateRoute path='/home' exact component={Communities} />\n                <PrivateRoute path='/properties' exact component={Properties} />\n                <PrivateRoute path='/communities' exact component={Communities} />\n                <PrivateRoute path='/xml-station' exact component={XmlStation} />\n                <PrivateRoute component={fourtOFour} />\n            </Switch>\n        );\n    }\n}\n\nexport default Routes;","import React, { Component } from 'react';\nimport SideNavigation from './SideNavigation';\nimport TopNavigation from './TopNavigation';\nimport Routes from './Routes';\n\nclass App extends Component {\n   constructor(props) {\n      super(props);\n      this.state = {\n         toggle: false,\n         windowWidth: 0,\n         currentPage: '',\n         sideNavToggled: false,\n         breakWidth: 1400\n      };\n   }\n   componentDidUpdate(prevProps, nextProps, snapshot) {\n      if (this.props.location.pathname !== prevProps.location.pathname) {\n         // this.assessLocation(this.props.location.pathname);\n      }\n   }\n   componentDidMount() {\n      this.handleResize();\n      window.addEventListener('resize', this.handleResize);\n      // this.assessLocation(this.props.location.pathname);\n   }\n   componentWillUnmount() {\n      window.removeEventListener('resize', this.handleResize);\n   }\n   handleResize = () => {\n      this.setState({\n         windowWidth: window.innerWidth\n      });\n   };\n   toggleSideNav = () => {\n      if (this.state.windowWidth < this.state.breakWidth) {\n         this.setState({\n            sideNavToggled: !this.state.sideNavToggled\n         });\n      }\n   };\n\n   // assessLocation = location => {\n   //    let locationString;\n   //    switch (location) {\n   //       // Dashboards:\n   //       case '/properties':\n   //          locationString = 'Properties';\n   //          break;\n   //       default:\n   //    }\n   //    this.setState({\n   //       currentPage: locationString\n   //    });\n   // };\n\n\n   render() {\n      const dynamicLeftPadding = {\n         paddingLeft:\n            this.state.windowWidth > this.state.breakWidth ? '240px' : '0'\n      };\n      return (\n         <div className='app'>\n            <div>\n               <SideNavigation />\n            </div>\n            <div>\n               <TopNavigation />\n            </div>\n            <main style={{ ...dynamicLeftPadding, margin: '6rem 2%' }}>\n               {/* <Routes onChange={() => this.assessLocation()} /> */}\n               <Routes />\n            </main>\n         </div>\n      )\n   }\n}\n\nexport default App;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './Login-Register.scss';\nimport classnames from \"classnames\";\n\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { loginUser } from \"../../actions/authActions\";\n\nimport {\n    MDBContainer,\n    MDBRow,\n    MDBCol,\n    MDBCard,\n    MDBCardBody,\n    MDBMask,\n    MDBInput,\n    MDBIcon,\n    MDBView,\n    MDBBtn\n} from 'mdbreact';\n\nclass Login extends Component {\n    constructor() {\n        super();\n        this.state = {\n            email: \"test@test.com\",\n            password: \"123456\",\n            errors: {}\n        }\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        if (nextProps.auth.isAuthenticated) {\n            this.props.history.push(\"/home\");\n        }\n        if (nextProps.errors) {\n            this.setState({\n                errors: nextProps.errors\n            })\n        }\n    }\n\n    UNSAFE_componentWillMount() {\n        if(this.props.auth.isAuthenticated) {\n            this.props.history.push(\"/home\");\n        }\n    }\n\n    onChange = e => {\n        this.setState({ [e.target.id]: e.target.value });\n    };\n    // validateForm = () => {\n    //     return this.state.email.length > 0 && this.state.password.length > 0;\n    // };\n    handleLoginSubmit = (event) => {\n        event.preventDefault();\n        const userData = {\n            email: this.state.email,\n            password: this.state.password\n        };\n        this.props.loginUser(userData);\n    };\n\n    render() {\n        const { errors } = this.state;\n        return (\n            <div className='classic-form-page' id='login'>\n                <MDBView>\n                    <MDBMask\n                        className='d-flex justify-content-center align-items-center'\n                        overlay='stylish-strong'\n                    >\n                        <MDBContainer>\n                            <MDBRow className='justify-content-around'>\n                                <MDBCol md='3' className='align-self-center'>\n                                    <img\n                                        src='/assets/logo/GKA-Dashboard-Logo-Login.svg'\n                                        className='img-fluid'\n                                        alt=\"Gka Dashboard\"\n                                    />\n                                </MDBCol>\n                                <MDBCol md='6'>\n                                    <MDBCard>\n                                        <MDBCardBody>\n                                            <div className='form-header gka-gradient'>\n                                                <h3 className='m-0'>\n                                                    <MDBIcon\n                                                        icon='user'\n                                                        className='mt-2 mb-2 mr-3 text-white'\n                                                    />\n                                                    Log in\n                                                </h3>\n                                            </div>\n                                            <form onSubmit={this.handleLoginSubmit} noValidate>\n                                                <MDBRow>\n                                                    <MDBCol sm='12'>\n                                                        <MDBInput\n                                                            autoFocus\n                                                            type='email'\n                                                            id='email'\n                                                            label='Your email'\n                                                            icon='user'\n                                                            iconClass='white-text'\n                                                            containerClass={classnames(\"form-sm\", { invalid: errors.email || errors.passwordincorrect || errors.emailnotfound })}\n                                                            value={this.state.email}\n                                                            onChange={this.onChange}\n                                                        />\n                                                        <div className=\"error-message\">\n                                                            {errors.email}\n                                                            {errors.emailnotfound}\n                                                            {errors.passwordincorrect}\n                                                        </div>\n                                                    </MDBCol>\n                                                    <MDBCol sm='12'>\n                                                        <MDBInput\n                                                            type='password'\n                                                            id='password'\n                                                            label='Your password'\n                                                            icon='lock'\n                                                            iconClass='white-text'\n                                                            containerClass={classnames(\"form-sm\", { invalid: errors.password || errors.passwordincorrect })}\n                                                            value={this.state.password}\n                                                            onChange={this.onChange}\n                                                        />\n                                                        <div className=\"error-message\">\n                                                            {errors.password}\n                                                            {errors.passwordincorrect}\n                                                        </div>\n                                                    </MDBCol>\n                                                </MDBRow>\n                                                <div className='text-center mt-3 black-text'>\n                                                    <MDBBtn className='gka-gradient' size='lg' type='submit'>\n                                                        Log In\n                                                    </MDBBtn>\n                                                    <hr />\n                                                </div>\n                                            </form>\n                                            <div className='inline-ul text-center d-flex justify-content-center'>\n                                                <a href='!#'>\n                                                    <MDBIcon\n                                                        fab\n                                                        icon='twitter'\n                                                        size='lg'\n                                                        className='p-2 m-2  white-text'\n                                                    />\n                                                </a>\n                                                <a href='!#'>\n                                                    <MDBIcon\n                                                        fab\n                                                        icon='linkedin'\n                                                        size='lg'\n                                                        className='p-2 m-2 white-text'\n                                                    />{' '}\n                                                </a>\n                                                <a href='!#'>\n                                                    <MDBIcon\n                                                        fab\n                                                        icon='instagram'\n                                                        size='lg'\n                                                        className='p-2 m-2 white-text'\n                                                    />\n                                                </a>\n                                            </div>\n                                            <div className='text-center text-white'>\n\n                                                Don’t have an account? <Link to='/register' className='text-white'><u>Sign up</u></Link>\n                                            </div>\n                                        </MDBCardBody>\n                                    </MDBCard>\n                                </MDBCol>\n                            </MDBRow>\n                        </MDBContainer>\n                    </MDBMask>\n                </MDBView>\n            </div>\n        );\n    }\n}\n\nLogin.propTypes = {\n    loginUser: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired,\n    errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    auth: state.auth,\n    errors: state.errors\n});\n\nexport default connect(\n    mapStateToProps,\n    { loginUser }\n)(Login);\n","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport './Login-Register.scss';\nimport classnames from \"classnames\";\n\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\"\nimport { registerUser } from \"../../actions/authActions\";\n\nimport {\n    MDBContainer,\n    MDBRow,\n    MDBCol,\n    MDBCard,\n    MDBCardBody,\n    MDBMask,\n    MDBInput,\n    MDBIcon,\n    MDBView,\n    MDBBtn\n} from 'mdbreact';\n\nclass Register extends Component {\n    constructor() {\n        super();\n        this.state = {\n            email: \"test1@test.com\",\n            password: \"123456\",\n            password2: \"123456\",\n            companyName: \"Gka advertising\",\n            gkaToken: \"kwHp28GeEMWwT8vqfrEF\",\n            errors: {}\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.errors) {\n            this.setState({\n                errors: nextProps.errors\n            });\n        }\n    }\n\n    onChange = e => {\n        this.setState({ [e.target.id]: e.target.value });\n    };\n\n    registerHandler = (event) => {\n        event.preventDefault();\n\n        console.log('Handled');\n        const newUser = {\n            email: this.state.email,\n            password: this.state.password,\n            password2: this.state.password2,\n            companyName: this.state.companyName,\n            gkaToken: this.state.gkaToken\n        }\n\n        this.props.registerUser(newUser, this.props.history);\n    }\n    render() {\n        const { errors } = this.state;\n        return (\n            <div className='classic-form-page' id='register'>\n                <MDBView>\n                    <MDBMask\n                        className='d-flex justify-content-center'\n                        overlay='stylish-strong'\n                    >\n                        <MDBContainer>\n                            <MDBRow>\n                                <MDBCol md='2' className='logo'>\n                                    <img\n                                        src='/assets/logo/GKA-Dashboard-Logo-Login.svg'\n                                        className='img-fluid'\n                                        alt=\"Gka Dashboard\"\n                                    />\n                                </MDBCol>\n                            </MDBRow>\n                            <MDBRow className='justify-content-around'>\n                                <MDBCol md='12'>\n                                    <MDBCard>\n                                        <MDBCardBody>\n                                            <div className='form-header gka-gradient'>\n                                                <h3 className='m-0'>\n                                                    <MDBIcon\n                                                        icon='user'\n                                                        className='mt-2 mb-2 mr-3 text-white'\n                                                    />\n                                                    Sign Up\n                                                </h3>\n                                            </div>\n                                            <form onSubmit={this.registerHandler}>\n                                                <MDBRow>\n                                                    <MDBCol md='4'>\n                                                        <MDBInput\n                                                            autoFocus\n                                                            type='email'\n                                                            id='email'\n                                                            label='Your email'\n                                                            icon='user'\n                                                            iconClass='white-text'\n                                                            containerClass={classnames(\"form-sm\", { invalid: errors.email })}\n                                                            value={this.state.email}\n                                                            onChange={this.onChange}\n                                                            required\n                                                        />\n                                                        <div className=\"error-message\">\n                                                            {errors.email}\n                                                        </div>\n                                                    </MDBCol>\n                                                    <MDBCol md='4'>\n                                                        <MDBInput\n                                                            type='password'\n                                                            id='password'\n                                                            label='Your password'\n                                                            icon='lock'\n                                                            iconClass='white-text'\n                                                            containerClass={classnames(\"form-sm\", { invalid: errors.password })}\n                                                            value={this.state.password}\n                                                            onChange={this.onChange}\n                                                            required\n                                                        />\n                                                        <div className=\"error-message\">\n                                                            {errors.password}\n                                                        </div>\n                                                    </MDBCol>\n                                                    <MDBCol md='4'>\n                                                        <MDBInput\n                                                            type='password'\n                                                            id='password2'\n                                                            label='Confirm password'\n                                                            icon='lock'\n                                                            iconClass='white-text'\n                                                            containerClass={classnames(\"form-sm\", { invalid: errors.password2 })}\n                                                            value={this.state.password2}\n                                                            onChange={this.onChange}\n                                                        />\n                                                        <div className=\"error-message\">\n                                                            {errors.password2}\n                                                        </div>\n                                                    </MDBCol>\n                                                    <MDBCol md='4'>\n                                                        <MDBInput\n                                                            type='text'\n                                                            id='companyName'\n                                                            label='Company name'\n                                                            icon='briefcase'\n                                                            iconClass='white-text'\n                                                            containerClass={classnames(\"form-sm\", { invalid: errors.companyName })}\n                                                            value={this.state.companyName}\n                                                            onChange={this.onChange}\n                                                        />\n                                                        <div className=\"error-message\">\n                                                            {errors.companyName}\n                                                        </div>\n                                                    </MDBCol>\n                                                    <MDBCol md='4'>\n                                                        <MDBInput\n                                                            type='text'\n                                                            id='gkaToken'\n                                                            label='Gka Token'\n                                                            icon='dollar-sign'\n                                                            iconClass='white-text'\n                                                            containerClass={classnames(\"form-sm\", { invalid: errors.gkaToken })}\n                                                            value={this.state.gkaToken}\n                                                            onChange={this.onChange}\n                                                        />\n                                                        <div className=\"error-message\">\n                                                            {errors.gkaToken}\n                                                        </div>\n                                                    </MDBCol>\n                                                </MDBRow>\n\n                                                <div className='text-center mt-3 black-text'>\n                                                    <MDBBtn className='gka-gradient' size='lg' type='submit'>\n                                                        Sign Up\n                                                    </MDBBtn>\n                                                    <hr />\n                                                </div>\n                                            </form>\n                                            <div className='inline-ul text-center d-flex justify-content-center'>\n                                                <a href='!#'>\n                                                    <MDBIcon\n                                                        fab\n                                                        icon='twitter'\n                                                        size='lg'\n                                                        className='p-2 m-2  white-text'\n                                                    />\n                                                </a>\n                                                <a href='!#'>\n                                                    <MDBIcon\n                                                        fab\n                                                        icon='linkedin'\n                                                        size='lg'\n                                                        className='p-2 m-2 white-text'\n                                                    />{' '}\n                                                </a>\n                                                <a href='!#'>\n                                                    <MDBIcon\n                                                        fab\n                                                        icon='instagram'\n                                                        size='lg'\n                                                        className='p-2 m-2 white-text'\n                                                    />\n                                                </a>\n                                            </div>\n                                            <div className='text-center text-white'>\n                                                Already have an account? <Link to='/login' className='text-white'><u>Log In</u></Link>\n                                            </div>\n                                        </MDBCardBody>\n                                    </MDBCard>\n                                </MDBCol>\n                            </MDBRow>\n                        </MDBContainer>\n                    </MDBMask>\n                </MDBView>\n            </div>\n        )\n    }\n}\n\nRegister.propTypes = {\n    registerUser: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired,\n    errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    auth: state.auth,\n    errors: state.errors\n});\n\nexport default connect(\n    mapStateToProps,\n    { registerUser }\n)(withRouter(Register));","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport jwt_decode from \"jwt-decode\";\nimport setAuthToken from \"./utils/setAuthToken\";\nimport { setCurrentUser, logoutUser } from \"./actions/authActions\";\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport RoutesWithNavigation from './components/RoutesWithNavigation';\nimport Login from './components/auth/Login';\nimport Register from './components/auth/Register';\n\n// Styles\nimport './components/css/App.scss';\nimport './components/css/Base.scss';\nimport './components/css/EditAddModal.scss';\n\n// Check for token to keep user logged in\nif (localStorage.jwtToken) {\n    // Set auth token header auth\n    const token = localStorage.jwtToken;\n    setAuthToken(token);\n    // Decode token and get user info and exp\n    const decoded = jwt_decode(token);\n    // Set user and isAuthenticated\n    store.dispatch(setCurrentUser(decoded));\n    // Check for expired token\n    const currentTime = Date.now() / 1000; // to get in milliseconds\n    if (decoded.exp < currentTime) {\n        // Logout user\n        store.dispatch(logoutUser());\n        // Redirect to login\n        window.location.href = \"./login\";\n    }\n}\n\nconst App = () => {\n    return (\n        <Provider store={store}>\n            <Switch>\n                <Route path='/' exact component={Login} />\n                <Route path='/login' exact component={Login} />\n                <Route path='/register' exact component={Register} />\n                <RoutesWithNavigation />\n            </Switch>\n        </Provider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\n\nconst customHistory = createBrowserHistory();\n\nReactDOM.render(\n    <Router history={customHistory}>\n        <App />\n    </Router>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}